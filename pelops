#!/usr/bin/env python3

import argparse
import hashlib
import itertools
import json
import re
import sys
import random

## File Functions

def read_fasta(filename):
	"""read fasta file one entry at a time"""
	label = None
	seq = []

	fp = None
	if    filename == '-':         fp = sys.stdin
	elif filename.endswith('.gz'): fp = gzip.open(filename, 'rt')
	else:                          fp = open(filename)

	while True:
		line = fp.readline()
		if line == '': break
		line = line.rstrip()
		if line.startswith('>'):
			if len(seq) > 0:
				seq = ''.join(seq)
				yield(label, seq)
				label = line[1:]
				seq = []
			else:
				label = line[1:]
		else:
			seq.append(line)
	yield(label, ''.join(seq))
	fp.close()

## K-mer Functions

def count_kmers(seq, k, full=False, init=0):
	"""get a table of kmer counts for a sequence with optional initial counts"""
	if full:
		kcount = {}
		for t in itertools.product('ACGT', repeat=k):
			kcount[''.join(t)] = init
	else:
		kcount = {}

	for i in range(len(seq) -k +1):
		kmer = seq[i:i+k]
		if kmer not in kcount: kcount[kmer] = 0
		kcount[kmer] += 1

	return kcount

## Sequence Utilities

def anti_seq(seq):
	"""get the reverse-complement of a sequence"""
	comp = str.maketrans('ACGTRYMKWSBDHVacgtrymkwsbdhv',
		'TGCAYRKMWSVHDBtgcayrkmwsvhdb')
	anti = seq.translate(comp)[::-1]
	return anti

def shuffle_seq(seq):
	"""get a randomly shuffled copy of a sequence"""
	dna = list(seq)
	random.shuffle(dna)
	return ''.join(dna)

def frame_shift_seq(seq, n=0, p=0, insert=False):
	"""if n provided, insert / delete n random bases from sequence, else mutate with probability p"""
	nuc = ['A', 'C', 'G', 'T']
	dna = list(seq)
	if n > 0:
		for i in random.sample(range(len(seq)), n):
			if insert == True:
				if   seq[i] == 'A': dna.insert(i, random.choice('CGT'))
				elif seq[i] == 'C': dna.insert(i, random.choice('AGT'))
				elif seq[i] == 'G': dna.insert(i, random.choice('ACT'))
				else:               dna.insert(i, random.choice('ACGs'))
			else: dna.pop(i)
	elif p > 0:
		for i in range(len(seq)):
			if random.random() > p:
				if insert == True:
					if   seq[i] == 'A': dna.insert(i, random.choice('CGT'))
					elif seq[i] == 'C': dna.insert(i, random.choice('AGT'))
					elif seq[i] == 'G': dna.insert(i, random.choice('ACT'))
					else:               dna.insert(i, random.choice('ACGs'))
				else: dna.pop(i)
	return "".join(dna)

def nmutate_seq(seq, n=0, p=0):
	"""get a copy of a sequence, mutated at n positions"""
	assert(n <= len(seq))
	dna = list(seq)
	if n > 0:
		for i in random.sample(range(len(seq)), n):
			if   seq[i] == 'A': dna[i] = random.choice('CGT')
			elif seq[i] == 'C': dna[i] = random.choice('AGT')
			elif seq[i] == 'G': dna[i] = random.choice('ACT')
			else:               dna[i] = random.choice('ACG')
	elif p > 0:
			for i in range(len(seq)):
				if random.random() < p:
					if   seq[i] == 'A': dna[i] = random.choice('CGT')
					elif seq[i] == 'C': dna[i] = random.choice('AGT')
					elif seq[i] == 'G': dna[i] = random.choice('ACT')
					else:               dna[i] = random.choice('ACG')
	return dna

def ksample_seq(seq, k, flop=False):
	"""get a sequence via sampled kmers"""
	dna = ''
	while True:
		i = random.randint(0, len(seq) -k)
		kmer = seq[i:i+k]
		if flop and random.random() < 0.5: kmer = korflab.anti(kmer)
		dna += kmer
		if len(dna) > len(seq): break
	return dna[:len(seq)]


#################
## Subcommands ##
#################

def compare(arg):
	print('comparing')

def testing(arg):
	"""internal testing"""

	if arg.kmers or arg.all:
		print('kmers', end=': ')
		seq = 'AAAAACCCCGGG'
		k = 3
		j = json.dumps(count_kmers(seq, k, full=True, init=1))
		if arg.verbose: print(seq, k, j)
		h = hashlib.md5(j.encode('utf-8')).hexdigest()
		assert(h == 'f985dbb89ede64a80574d55810c7e577')
		print('passed', h)

def benchmark(arg):
	import time
	seq = 'ACGT' * 99
	limit = 999

	# method 1: if-elif stack
	t0 = time.time()
	for i in range(limit):
		for nt in seq:
			if   nt == 'A': s = random.choice('CGT')
			elif nt == 'C': s = random.choice('AGT')
			elif nt == 'G': s = random.choice('ACT')
			else:           s = random.choice('ACG')

	# method 2: list comprehension
	t1 = time.time()
	alph = 'ACGT'
	for i in range(limit):
		for nt in seq:
			subs = [x for x in alph if x != nt]
			s = random.choice(subs)

	# method 3: dictionary
	t2 = time.time()
	sub = {'A': 'CGT', 'C': 'AGT', 'G': 'ACT',	'T': 'ACG'}
	for i in range(limit):
		for nt in seq:
			s = random.choice(sub[nt])

	t3 = time.time()
	print(t1 - t0)
	print(t2 - t1)
	print(t3 - t2)

#########
## CLI ##
#########

parser = argparse.ArgumentParser()
sub = parser.add_subparsers(required=True, help='sub-commands')

## compare sub-command ##
parse_cmp = sub.add_parser('compare', help='compare 2 sequences')
parse_cmp.add_argument('--file1', required=True, help='fasta file')
parse_cmp.add_argument('--file2', required=True, help='fasta file')
parse_cmp.add_argument('--kmin', required=False, type=int, default=5,
	help='minimum k-mer size [default %(default)i]')
parse_cmp.add_argument('--kmax', required=False, type=int, default=7,
	help='maximum k-mer size [default %(default)i]')
parse_cmp.add_argument('--single', required=False, action='store_true',
	help='use single-stranded k-mers [default double-stranded]')
parse_cmp.set_defaults(func=compare)

## test sub-command
parse_test = sub.add_parser('test', help='internal testing')
parse_test.add_argument('--all', required=False, action='store_true')
parse_test.add_argument('--kmers', required=False, action='store_true')
parse_test.add_argument('--verbose', required=False, action='store_true')
parse_test.set_defaults(func=testing)

## benchmark sub-command
parse_bench = sub.add_parser('bench', help='internal benchmarking')
parse_bench.set_defaults(func=benchmark)


## execute sub-command ##
try: arg = parser.parse_args()
except: sys.exit('pelops requires a sub-command, use --help for more info')
arg.func(arg)
